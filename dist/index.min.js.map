{"version":3,"sources":["index.js"],"names":["Manager","require","Engineer","inquirer","fs","Intern","resolve","__dirname","outputPath","path","join","OUTPUT_DIR","type","generateTeam","name","teamArray","then","userInput","runApp","addEmployeePrompt","createTeam","prompt","message","htmlBuilder","_ref","managerName","managerId","managerEmail","managerOfficeNumber","push","_ref2","engineerName","engineerId","engineerEmail","engineerGithub","choices","_ref3","internEmail","internName","internId"],"mappings":"aAAA,IAAMA,QAAUC,QAAQ,oBAClBC,SAAWD,QAAQ,qBADnBD,OAAUC,QAAQ,mBAGlBE,SAAWF,QAAQ,YAFnBC,KAAQD,QAAGA,QAIXG,GAAKH,QAAQ,MAHbI,WAASJ,KAAQK,QAAAC,UAAvB,UAKMC,WAAaC,KAAKC,KAAKC,WAAY,aAJnCR,aAAWF,QAAQ,qBAEzB,SAAWA,SACX,SAAMU,IACAH,SAAAA,OAAaC,CAAI,CASjBG,KAAM,OARNC,QAAAA,4DAUAC,KAAM,oBARZC,QAAA,CAAA,UAAA,WAAA,SAAA,uCAUQC,KAAK,SAAUC,GARvB,OAASC,EAAUC,mBAEjB,IAASC,UA2BPjB,SAASkB,OAAO,CATZ,CAAAT,KAAA,QAAAE,KAAA,cAAAQ,QAAA,+BACEC,CAAAA,KAAAA,QAAWT,KAAA,YAAAQ,QAAA,6CAZf,CAAAV,KAAA,QAAAE,KAAA,eAAAQ,QAAA,wCANF,CAAAV,KAAA,QAAAE,KAAA,sBAAAQ,QAAA,0CAuBFN,KAAA,SAAAQ,GAAA,IAAAC,EAAAD,EAAAC,YAAAC,EAAAF,EAAAE,UAAAC,EAAAH,EAAAG,aAAAC,EAAAJ,EAAAI,oBASIb,UAAUc,KAAK,IAAI7B,QAAQyB,EAAaC,EAAWC,EAAcC,IACjER,MAhCI,MACJE,IAAO,WAyB+BA,SAAOD,OAAE,CADjC,CAEdT,KAAA,QAAAE,KAAA,eAAAQ,QAAA,gCAAEV,CAAAA,KAAM,QAARE,KAAA,aAAAQ,QAAA,8CAAiBR,CAAAA,KAAM,QAAvBA,KAAA,gBAAAQ,QAAA,yCAAoCA,CAAAA,KAAO,QAAER,KAAA,iBAAAQ,QAAA,6CAC7CN,KAAA,SAAAc,GAAA,IAAAC,EAAAD,EAAAC,aAAAC,EAAAF,EAAAE,WAAAC,EAAAH,EAAAG,cAAAC,EAAAJ,EAAAI,eAAEtB,UAAMiB,KAAR,IAAA3B,SAAA6B,EAAAC,EAAAC,EAAAC,IAAiBpB,MAzBjBqB,MACEnB,IAAK,SAyBuCM,SAAOD,OAAE,CAJzD,CAKGL,KAAK,QAAAF,KAAiE,aAAAQ,QAAA,8BAAA,CAAAV,KAA/Da,QAA+DX,KAA/DW,WAA+DH,QAAA,4CAAA,CAAAV,KAAlDc,QAAkDZ,KAAlDY,cAAkDJ,QAAA,uCAAA,CAAAV,KAAvCe,QAAuCb,KAAA,eAAAQ,QAAA,yCAAAN,KAAzBY,SAAAA,GAAyB,IAAzBA,EAAyBQ,EAAzBR,WAAAA,EAAyBQ,EAAzBR,SAAyBS,EAAAD,EAAAC,YAAzBT,EAAyBQ,EAAzBR,aAC9Cb,UAAUc,KAAK,IAAI7B,OAAJsC,EAAAC,EAAyBb,EAAWC,IACnDP,MA1BE,MAEE,QA8BmCE,QAAAA,IAAS,iBAC9CV,GAAAA,cAAFJ,WAAAK,aAAAE,WAAA,YACEH,IApDRG,UAAad,GAqDLW","file":"index.min.js","sourcesContent":["const Manager = require(\"./lib/Manager.js\");\r\nconst Engineer = require(\"./lib/Engineer.js\");\r\nconst Intern = require(\"./lib/Intern.js\");\r\nconst inquirer = require(\"inquirer\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst OUTPUT_DIR = path.resolve(__dirname, \"output\");\r\nconst outputPath = path.join(OUTPUT_DIR, \"team.html\");\r\nconst generateTeam = require(\"./src/template.js\")\r\n\r\nteamArray = [];\r\n\r\nfunction runApp () {\r\n\r\n  function createTeam () {\r\n    inquirer.prompt([{\r\n      type: \"list\",\r\n      message: \"What type of employee would you like to add to your team?\",\r\n      name: \"addEmployeePrompt\",\r\n      choices: [\"Manager\", \"Engineer\", \"Intern\", \"No more team members are needed.\"]\r\n    }]).then(function (userInput) {\r\n      switch(userInput.addEmployeePrompt) {\r\n        case \"Manager\":\r\n          addManager();\r\n          break;\r\n        case \"Engineer\":\r\n          addEngineer();\r\n          break;\r\n        case \"Intern\":\r\n          addIntern();\r\n          break;\r\n\r\n        default:\r\n          htmlBuilder();\r\n      }\r\n    })\r\n  }\r\n\r\n  //Prompts to ask the person\r\n\r\n  function addManager() {\r\n    inquirer.prompt([\r\n      { type: \"input\", name: \"managerName\", message: \"What is the manager's name?\" },\r\n      { type: \"input\", name: \"managerId\", message: \"What is the manager's employee ID number?\" },\r\n      { type: \"input\", name: \"managerEmail\", message: \"What is the manager's email address?\" },\r\n      { type: \"input\", name: \"managerOfficeNumber\", message: \"What is the manager's office number?\" }\r\n    ]).then(({managerName, managerId, managerEmail, managerOfficeNumber}) => {\r\n      teamArray.push(new Manager(managerName, managerId, managerEmail, managerOfficeNumber));\r\n      createTeam();\r\n    });\r\n  }\r\n  \r\n  function addEngineer() {\r\n    inquirer.prompt([\r\n      { type: \"input\", name: \"engineerName\", message: \"What is the engineer's name?\" },\r\n      { type: \"input\", name: \"engineerId\", message: \"What is the engineer's employee ID number?\" },\r\n      { type: \"input\", name: \"engineerEmail\", message: \"What is the engineer's email address?\" },\r\n      { type: \"input\", name: \"engineerGithub\", message: \"What is the engineer's GitHub username?\" }\r\n    ]).then(({engineerName, engineerId, engineerEmail, engineerGithub}) => {\r\n      teamArray.push(new Engineer(engineerName, engineerId, engineerEmail, engineerGithub));\r\n      createTeam();\r\n    });\r\n  }\r\n  \r\n  function addIntern() {\r\n    inquirer.prompt([\r\n      { type: \"input\", name: \"internName\", message: \"What is the intern's name?\" },\r\n      { type: \"input\", name: \"internId\", message: \"What is the intern's employee ID number?\" },\r\n      { type: \"input\", name: \"internEmail\", message: \"What is the intern's email address?\" },\r\n      { type: \"input\", name: \"internSchool\", message: \"What school does the intern attend?\" }\r\n    ]).then(({internName, internId, internEmail, internSchool}) => {\r\n      teamArray.push(new Intern(internName, internId, internEmail, internSchool));\r\n      createTeam();\r\n    });\r\n  }\r\n  \r\n\r\n\r\n\r\nfunction htmlBuilder () {\r\n    console.log(\"Team created!\")\r\n\r\n    fs.writeFileSync(outputPath, generateTeam(teamArray), \"UTF-8\")\r\n\r\n}\r\n\r\ncreateTeam();\r\n\r\n}\r\n\r\nrunApp();"]}